#include <iostream>
using namespace std;

long long n, m, k;
long long a, b, c;
long long arr[1000100];
long long tree[1000100 * 4 + 1];

long long init(long long s, long long e, long long node)
{
    if (s == e)
    {
        return tree[node] = arr[s];
    }
    
    long long mid = (s + e) / 2;
    
    return tree[node] = init(s, mid, node * 2) + init(mid + 1, e, node * 2 + 1);
}

long long sum(long long s, long long e, long long node, long long l, long long r)
{
    if (l > e || r < s)
    {
        return 0;
    }
    
    if (l <= s && e <= r)
    {
        return tree[node];
    }
    
    long long mid = (s + e) / 2;
    
    return sum(s, mid, node * 2, l, r) + sum(mid + 1, e, node * 2 + 1, l, r);
}

void update(long long s, long long e, long long node, long long idx, long long val)
{
    if (idx < s || idx > e)
    {
        return;
    }
    
    tree[node] += val;
    
    if (s == e)
    {
        return;
    }
    
    long long mid = (s + e) / 2;
    
    update(s, mid, node * 2, idx, val);
    update(mid + 1, e, node * 2 + 1, idx, val);
}

int main()
{
    cin >> n >> m >> k;
    
    for (int i = 1; i <= n; i++)
    {
        cin >> arr[i];
    }
    
    init(1, n, 1);
    
    for (int i = 0; i < m + k; i++)
    {
        cin >> a >> b >> c;
        
        if (a == 1)
        {
            update(1, n, 1, b, c - arr[b]);
            arr[b] = c;
        }
        else
        {
            cout << sum(1, n, 1, b, c) << "\n";
        }
    }
}
